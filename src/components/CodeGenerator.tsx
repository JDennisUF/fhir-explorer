import React, { useState } from 'react';
import { Code, Copy, Check, Download, Wand2 } from 'lucide-react';

interface CodeGeneratorProps {
  resourceName: string;
  resourceData?: any;
}

type CodeFormat = 'typescript' | 'javascript' | 'json' | 'curl';

export default function CodeGenerator({ resourceName, resourceData }: CodeGeneratorProps) {
  const [selectedFormat, setSelectedFormat] = useState<CodeFormat>('typescript');
  const [copied, setCopied] = useState(false);
  const [includeComments, setIncludeComments] = useState(true);
  const [includeValidation, setIncludeValidation] = useState(false);

  const formats = [
    { id: 'typescript', label: 'TypeScript', icon: '🟦' },
    { id: 'javascript', label: 'JavaScript', icon: '🟨' },
    { id: 'json', label: 'JSON', icon: '📄' },
    { id: 'curl', label: 'cURL', icon: '🌐' }
  ];

  const generateCode = (): string => {
    switch (selectedFormat) {
      case 'typescript':
        return generateTypeScript();
      case 'javascript':
        return generateJavaScript();
      case 'json':
        return generateJSON();
      case 'curl':
        return generateCurl();
      default:
        return '';
    }
  };

  const generateTypeScript = (): string => {
    const comments = includeComments ? `// FHIR R4 ${resourceName} Interface
// Generated by FHIR Explorer
${includeValidation ? '// Includes basic validation helpers\n' : ''}
` : '';

    const baseInterface = `interface FHIR${resourceName} {
  resourceType: '${resourceName}';
  id?: string;
  meta?: {
    versionId?: string;
    lastUpdated?: string;
    profile?: string[];
  };`;

    const resourceSpecificFields = getResourceFields();
    
    const validationCode = includeValidation ? `

// Validation helper
export function validate${resourceName}(resource: FHIR${resourceName}): boolean {
  if (resource.resourceType !== '${resourceName}') {
    throw new Error('Invalid resourceType');
  }
  ${getValidationRules()}
  return true;
}

// Create helper
export function create${resourceName}(data: Partial<FHIR${resourceName}>): FHIR${resourceName} {
  return {
    resourceType: '${resourceName}',
    ...data
  };
}` : '';

    return `${comments}${baseInterface}
${resourceSpecificFields}
}${validationCode}

// Example usage
const example${resourceName}: FHIR${resourceName} = ${generateExampleUsage()};`;
  };

  const generateJavaScript = (): string => {
    const comments = includeComments ? `// FHIR R4 ${resourceName} JavaScript Object
// Generated by FHIR Explorer
${includeValidation ? '// Includes basic validation helpers\n' : ''}
` : '';

    const validationCode = includeValidation ? `
// Validation helper
function validate${resourceName}(resource) {
  if (resource.resourceType !== '${resourceName}') {
    throw new Error('Invalid resourceType');
  }
  ${getValidationRulesJS()}
  return true;
}

// Create helper
function create${resourceName}(data = {}) {
  return {
    resourceType: '${resourceName}',
    ...data
  };
}` : '';

    return `${comments}// ${resourceName} resource structure
const ${resourceName.toLowerCase()}Schema = {
  resourceType: '${resourceName}',
  id: 'string (optional)',
  meta: {
    versionId: 'string (optional)',
    lastUpdated: 'dateTime (optional)',
    profile: 'string[] (optional)'
  },
${getResourceFieldsJS()}
};${validationCode}

// Example usage
const example${resourceName} = ${generateExampleUsageJS()};`;
  };

  const generateJSON = (): string => {
    if (resourceData) {
      return JSON.stringify(resourceData, null, 2);
    }

    return JSON.stringify(generateSampleResource(), null, 2);
  };

  const generateCurl = (): string => {
    const comments = includeComments ? `# FHIR R4 ${resourceName} cURL Commands
# Generated by FHIR Explorer
# Replace <base-url> with your FHIR server URL
${includeValidation ? '# Includes validation examples\n' : ''}
` : '';

    return `${comments}# Create ${resourceName}
curl -X POST "<base-url>/fhir/${resourceName}" \\
  -H "Content-Type: application/fhir+json" \\
  -H "Accept: application/fhir+json" \\
  -d '${JSON.stringify(generateSampleResource(), null, 2)}'

# Read ${resourceName}
curl -X GET "<base-url>/fhir/${resourceName}/[id]" \\
  -H "Accept: application/fhir+json"

# Update ${resourceName}
curl -X PUT "<base-url>/fhir/${resourceName}/[id]" \\
  -H "Content-Type: application/fhir+json" \\
  -H "Accept: application/fhir+json" \\
  -d '${JSON.stringify(generateSampleResource(), null, 2)}'

# Search ${resourceName}
curl -X GET "<base-url>/fhir/${resourceName}?${getSearchParameters()}" \\
  -H "Accept: application/fhir+json"`;
  };

  const getResourceFields = (): string => {
    switch (resourceName) {
      case 'Patient':
        return `  identifier?: Array<{
    use?: 'usual' | 'official' | 'temp' | 'secondary' | 'old';
    system?: string;
    value?: string;
  }>;
  active?: boolean;
  name?: Array<{
    use?: 'usual' | 'official' | 'temp' | 'nickname' | 'anonymous' | 'old' | 'maiden';
    family?: string;
    given?: string[];
  }>;
  gender?: 'male' | 'female' | 'other' | 'unknown';
  birthDate?: string; // YYYY-MM-DD format
  address?: Array<{
    use?: 'home' | 'work' | 'temp' | 'old' | 'billing';
    line?: string[];
    city?: string;
    state?: string;
    postalCode?: string;
    country?: string;
  }>;`;
      case 'Observation':
        return `  status: 'registered' | 'preliminary' | 'final' | 'amended' | 'corrected' | 'cancelled' | 'entered-in-error' | 'unknown';
  code: {
    coding?: Array<{
      system?: string;
      code?: string;
      display?: string;
    }>;
    text?: string;
  };
  subject: {
    reference: string; // Reference to Patient, Group, Device, or Location
    display?: string;
  };
  valueQuantity?: {
    value?: number;
    unit?: string;
    system?: string;
    code?: string;
  };
  valueString?: string;
  valueBoolean?: boolean;`;
      default:
        return `  // Resource-specific fields would be defined here
  // Check the FHIR specification for ${resourceName} resource structure`;
    }
  };

  const getResourceFieldsJS = (): string => {
    switch (resourceName) {
      case 'Patient':
        return `  identifier: 'Array of identifier objects (optional)',
  active: 'boolean (optional)',
  name: 'Array of name objects (optional)',
  gender: 'string: male|female|other|unknown (optional)',
  birthDate: 'string: YYYY-MM-DD format (optional)',
  address: 'Array of address objects (optional)'`;
      case 'Observation':
        return `  status: 'string: registered|preliminary|final|amended|corrected|cancelled|entered-in-error|unknown (required)',
  code: 'CodeableConcept object (required)',
  subject: 'Reference object to Patient|Group|Device|Location (required)',
  valueQuantity: 'Quantity object (optional)',
  valueString: 'string (optional)',
  valueBoolean: 'boolean (optional)'`;
      default:
        return `  // Resource-specific fields would be defined here`;
    }
  };

  const getValidationRules = (): string => {
    switch (resourceName) {
      case 'Patient':
        return `  // Patient-specific validation rules
  // Add validation logic here`;
      case 'Observation':
        return `  if (!resource.status) {
    throw new Error('status is required');
  }
  if (!resource.code) {
    throw new Error('code is required');
  }
  if (!resource.subject) {
    throw new Error('subject is required');
  }`;
      default:
        return `  // Add resource-specific validation here`;
    }
  };

  const getValidationRulesJS = (): string => {
    switch (resourceName) {
      case 'Observation':
        return `  if (!resource.status) {
    throw new Error('status is required');
  }
  if (!resource.code) {
    throw new Error('code is required');
  }
  if (!resource.subject) {
    throw new Error('subject is required');
  }`;
      default:
        return `  // Add validation logic here`;
    }
  };

  const generateSampleResource = (): any => {
    switch (resourceName) {
      case 'Patient':
        return {
          resourceType: 'Patient',
          id: 'example-patient',
          identifier: [{
            use: 'usual',
            system: 'http://hospital.example.org/patient-ids',
            value: 'MRN123456'
          }],
          active: true,
          name: [{
            use: 'official',
            family: 'Doe',
            given: ['John', 'Michael']
          }],
          gender: 'male',
          birthDate: '1980-01-01'
        };
      case 'Observation':
        return {
          resourceType: 'Observation',
          id: 'example-observation',
          status: 'final',
          code: {
            coding: [{
              system: 'http://loinc.org',
              code: '8480-6',
              display: 'Systolic blood pressure'
            }]
          },
          subject: {
            reference: 'Patient/example-patient'
          },
          valueQuantity: {
            value: 120,
            unit: 'mmHg',
            system: 'http://unitsofmeasure.org',
            code: 'mm[Hg]'
          }
        };
      default:
        return {
          resourceType: resourceName,
          id: `example-${resourceName.toLowerCase()}`
        };
    }
  };

  const generateExampleUsage = (): string => {
    return JSON.stringify(generateSampleResource(), null, 2);
  };

  const generateExampleUsageJS = (): string => {
    return JSON.stringify(generateSampleResource(), null, 2);
  };

  const getSearchParameters = (): string => {
    switch (resourceName) {
      case 'Patient':
        return 'family=Doe&given=John&birthdate=1980-01-01';
      case 'Observation':
        return 'patient=Patient/example-patient&code=8480-6&date=2024-01-01';
      default:
        return '_id=example-id';
    }
  };

  const copyToClipboard = async () => {
    try {
      await navigator.clipboard.writeText(generateCode());
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    } catch (err) {
      console.error('Failed to copy to clipboard', err);
    }
  };

  const downloadCode = () => {
    const code = generateCode();
    const fileExtension = selectedFormat === 'typescript' ? 'ts' : 
                         selectedFormat === 'javascript' ? 'js' : 
                         selectedFormat === 'json' ? 'json' : 'sh';
    const fileName = `${resourceName.toLowerCase()}-example.${fileExtension}`;
    
    const blob = new Blob([code], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = fileName;
    a.click();
    URL.revokeObjectURL(url);
  };

  return (
    <div className="bg-white border border-gray-200 rounded-lg overflow-hidden">
      {/* Header */}
      <div className="bg-gray-50 px-4 py-3 border-b border-gray-200">
        <div className="flex items-center justify-between">
          <div className="flex items-center">
            <Wand2 className="h-5 w-5 text-purple-600 mr-2" />
            <h3 className="text-sm font-medium text-gray-900">Code Generator</h3>
          </div>
          <div className="flex items-center space-x-2">
            <button
              onClick={copyToClipboard}
              className="inline-flex items-center px-3 py-1 text-xs font-medium text-gray-600 hover:text-gray-900 hover:bg-gray-100 rounded"
            >
              {copied ? <Check className="h-3 w-3 mr-1" /> : <Copy className="h-3 w-3 mr-1" />}
              {copied ? 'Copied!' : 'Copy'}
            </button>
            <button
              onClick={downloadCode}
              className="inline-flex items-center px-3 py-1 text-xs font-medium text-gray-600 hover:text-gray-900 hover:bg-gray-100 rounded"
            >
              <Download className="h-3 w-3 mr-1" />
              Download
            </button>
          </div>
        </div>
      </div>

      {/* Controls */}
      <div className="p-4 border-b border-gray-200 bg-gray-50">
        <div className="flex flex-wrap items-center gap-4">
          <div>
            <label className="text-sm font-medium text-gray-700 mr-2">Format:</label>
            <select
              value={selectedFormat}
              onChange={(e) => setSelectedFormat(e.target.value as CodeFormat)}
              className="px-3 py-1 border border-gray-300 rounded text-sm focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            >
              {formats.map((format) => (
                <option key={format.id} value={format.id}>
                  {format.icon} {format.label}
                </option>
              ))}
            </select>
          </div>
          
          <div className="flex items-center space-x-4">
            <label className="flex items-center text-sm">
              <input
                type="checkbox"
                checked={includeComments}
                onChange={(e) => setIncludeComments(e.target.checked)}
                className="h-4 w-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
              />
              <span className="ml-2 text-gray-700">Include comments</span>
            </label>
            
            <label className="flex items-center text-sm">
              <input
                type="checkbox"
                checked={includeValidation}
                onChange={(e) => setIncludeValidation(e.target.checked)}
                className="h-4 w-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
              />
              <span className="ml-2 text-gray-700">Include validation</span>
            </label>
          </div>
        </div>
      </div>

      {/* Generated Code */}
      <div className="p-4 bg-gray-900 text-gray-100 overflow-x-auto max-h-96">
        <pre className="text-sm font-mono whitespace-pre-wrap">
          <code>{generateCode()}</code>
        </pre>
      </div>
    </div>
  );
}